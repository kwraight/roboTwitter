//twitter bits
#include <Twitter.h>
//sensor bits
#include "DHT.h"
#include <stdlib.h>
//ethernet bits
#include <SPI.h>
#include <Ethernet.h>

//sensor details
#define DHTPIN 7     // what digital pin the DHT22 is conected to
#define DHTTYPE DHT22   // There are multiple kinds of DHT sensors

//ehternet details
byte mac[] = { 0x52, 0x54, 0x00, 0xD2, 0x20, 0x01 };
char server[] = "www.google.com";    
IPAddress ip(192, 168, 0, 177);

//start clients
DHT dht(DHTPIN, DHTTYPE); //sensor
EthernetClient client;

// OAuth Token
// Get your Token here: http://arduino-tweet.appspot.com/oauth/twitter/login
Twitter twitter("YOUR_INFO_HERE");

void setup() {
  // Open serial communications and wait for port to open:
  Serial.begin(115200);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  Serial.println("got serial port");
  // start the Ethernet connection:
  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP");
    // try to congifure using IP address instead of DHCP:
    Ethernet.begin(mac, ip);
  }
  printIPAddress();
  // give the Ethernet shield a second to initialize:
  delay(1000);
  Serial.println("connecting...");

  // if you get a connection, report back via serial:
  if (client.connect(server, 80)) {
    Serial.println("connected");
  } 
  else {
    // if you didn't get a connection to the server:
    Serial.println("connection failed");
  }

  Serial.println("all done here");

}


//use to time update cycles
int timeSinceLastRead = 0;

void loop() {
  
  //Serial.println("in loop: "+String(timeSinceLastRead));
  // Report every 300s
  if(timeSinceLastRead > 300) {
    Serial.println("reading sensor");
    // Reading temperature or humidity takes about 250 milliseconds!
    // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
    float h = dht.readHumidity();
    // Read temperature as Celsius (the default)
    float t = dht.readTemperature();
    // Read temperature as Fahrenheit (isFahrenheit = true)
    float f = dht.readTemperature(true);

    // Check if any reads failed and exit early (to try again).
    if (isnan(h) || isnan(t) || isnan(f)) {
      Serial.println("Failed to read from DHT sensor!");
      //make twitter post
    char buf[100];
    sprintf(buf, "test from afar NO INFO. #tempHum #RoboUno #Problem"); 
    Serial.println(buf); // for debug
    tweet(buf); // tweet!
      timeSinceLastRead = 0;
      return;
    }

    // Compute heat index in Fahrenheit (the default)
    float hif = dht.computeHeatIndex(f, h);
    // Compute heat index in Celsius (isFahreheit = false)
    float hic = dht.computeHeatIndex(t, h, false);

    //spit out sensor info for debug
    Serial.print("Humidity: ");
    Serial.print(h);
    Serial.print(" %\t");
    Serial.print("Temperature: ");
    Serial.print(t);
    Serial.print(" *C ");
    Serial.print(f);
    Serial.print(" *F\t");
    Serial.print("Heat index: ");
    Serial.print(hic);
    Serial.print(" *C ");
    Serial.print(hif);
    Serial.print(" *F\n");
    
    //make twitter post
    char buf[100];
    char str_temp[10];
    char str_humi[10];
    dtostrf(t, 9, 6, str_temp);
    dtostrf(h, 9, 6, str_humi);
    sprintf(buf, "test from afar T/H(C/%%): %s / %s #tempHum #RoboUno", str_temp, str_humi); 
    tweet(buf); // tweet!
    Serial.println(buf);

    //reset timer
    timeSinceLastRead = 0;
  }
  //count for next update
  delay(1000);
  timeSinceLastRead += 1;

}


void tweet(char msg[]) {
  Serial.println("connecting ...");
  if (twitter.post(msg)) {
    int status = twitter.wait(&Serial);
    if (status == 200) {
      Serial.println("OK.");
    } else {
      Serial.print("failed : code ");
      Serial.println(status);
    }
  } else {
    Serial.println("connection failed.");
  }
}


void printIPAddress()
{
  Serial.print("My IP address: ");
  for (byte thisByte = 0; thisByte < 4; thisByte++) {
    // print the value of each byte of the IP address:
    Serial.print(Ethernet.localIP()[thisByte], DEC);
    Serial.print(".");
  }

  Serial.println();
}

